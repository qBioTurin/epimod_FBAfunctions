// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_cobra_mat
List read_cobra_mat(const std::string& file);
RcppExport SEXP _epimodFBAfunctions_read_cobra_mat(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_cobra_mat(file));
    return rcpp_result_gen;
END_RCPP
}
// writeModelCpp
void writeModelCpp(NumericMatrix S, CharacterVector react_id, CharacterVector met_id, NumericVector obj_coef, NumericVector lowbnd, NumericVector uppbnd, NumericVector rb, NumericVector gene_assoc, std::string model_name, bool write, std::string wd, double bioMax, double bioMean, double bioMin, int pFBAFlag);
RcppExport SEXP _epimodFBAfunctions_writeModelCpp(SEXP SSEXP, SEXP react_idSEXP, SEXP met_idSEXP, SEXP obj_coefSEXP, SEXP lowbndSEXP, SEXP uppbndSEXP, SEXP rbSEXP, SEXP gene_assocSEXP, SEXP model_nameSEXP, SEXP writeSEXP, SEXP wdSEXP, SEXP bioMaxSEXP, SEXP bioMeanSEXP, SEXP bioMinSEXP, SEXP pFBAFlagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type react_id(react_idSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type met_id(met_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obj_coef(obj_coefSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lowbnd(lowbndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uppbnd(uppbndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rb(rbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gene_assoc(gene_assocSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type write(writeSEXP);
    Rcpp::traits::input_parameter< std::string >::type wd(wdSEXP);
    Rcpp::traits::input_parameter< double >::type bioMax(bioMaxSEXP);
    Rcpp::traits::input_parameter< double >::type bioMean(bioMeanSEXP);
    Rcpp::traits::input_parameter< double >::type bioMin(bioMinSEXP);
    Rcpp::traits::input_parameter< int >::type pFBAFlag(pFBAFlagSEXP);
    writeModelCpp(S, react_id, met_id, obj_coef, lowbnd, uppbnd, rb, gene_assoc, model_name, write, wd, bioMax, bioMean, bioMin, pFBAFlag);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epimodFBAfunctions_read_cobra_mat", (DL_FUNC) &_epimodFBAfunctions_read_cobra_mat, 1},
    {"_epimodFBAfunctions_writeModelCpp", (DL_FUNC) &_epimodFBAfunctions_writeModelCpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_epimodFBAfunctions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
